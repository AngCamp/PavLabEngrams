rownames(jeager2018_meta) <- c(1:912)
# blank.to.DG <-function(x){
#   if(x==""){
#     x="DG"
#   }
# }
jeager2018_meta$predicted_cell_type <- as.character(lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x}))
jeager2018_meta$predicted_cell_type <- lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x})
#ditch mousingle_number, put it into Mouse_Number
jeager2018_meta$Mouse_Number[361:912] <- jeager2018_meta$mousingle_number[361:912]
jeager2018_meta <- jeager2018_meta[,c(1:33,35,36)]
meangenecounts <- function(tpm.df){
test <- log(tpm.df+1, 2)>1 #log base 2 tpm counts +1 over 1
return(mean(as.numeric(colSums(test, na.rm = TRUE))))
}
print("Average gene's passing threshold per cell:")
print(meangenecounts(jeager2018_tpm[,c(1:360)]))
print("Total missing entries in first dataset:")
print(sum(is.na(jeager2018_tpm[,c(1:360)])))
test <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)))))
print(summary(test))
test2 <- sapply(jeager2018_counts[,c(1:360)], function(y) sum(length(which(y>0))))
# which(test2<4000)
# X151207_E12_N_C_F_EE_2 X151207_H12_N_C_F_EE_2  X151214_F1_P_C_N_EE_3  X151214_H1_P_C_N_EE_3 X151214_H11_P_C_F_EE_3             X160107_07
#                     49                     83                    123                    137                    139                    199
#             X160107_08             X160107_22             X160107_23             X160107_29             X160118_09             X160118_14
#                    200                    214                    215                    221                    249                    254
#             X160118_16             X160118_17             X160118_21             X160118_27             X160118_28             X160118_29
#                    256                    257                    261                    267                    268                    269
#             X160118_30             X160118_31
#                    270                    271
# > length(which(test2>3999))
# [1] 340
filtered.idx <- as.numeric(which(test2>4000))
filtered.idx <- order(c(filtered.idx,194))
print("Average gene's passing threshold per cell:")
print(meangenecounts(jeager2018_tpm[,filtered.idx]))
print("Total missing entries in first dataset:")
print(sum(is.na(jeager2018_tpm[,filtered.idx])))
filteredDat <- jeager2018_tpm[,filtered.idx]
filteredDat[is.na(filteredDat)] = 0
filteredDat <- t(filteredDat)
filteredDat <- data.frame(filteredDat)
filteredDat$batch <- as.factor(jeager2018_meta$Mouse_Number[filtered.idx])
#using FactoMineR PCA function
pcs <- PCA(filteredDat,
quali.sup=c(40222), #to identify batch as a qualitative variable
graph = FALSE)
library(reshape2)
library(FactoMineR)
library(factoextra)
library(reshape2)
library(FactoMineR)
library(factoextra)
pcs <- PCA(filteredDat,
quali.sup=c(40222), #to identify batch as a qualitative variable
graph = FALSE)
#putting pcs into our dataframe
filteredDat$pc1 <- pcs$ind$coord[, 1]
filteredDat$pc2 <- pcs$ind$coord[, 2]
plot.CA(pcs)
plot.PCA(pcs)
p <- ggplot(data = filteredDat, aes(x = pc1, y = pc2, color = batch)) +
geom_point()
p
p
p <- ggplot(data = filteredDat, aes(x = pc1, y = pc2, color = batch)) +
geom_point()  + labs(color='Mouse (Batch)')
p
p <- ggplot(data = filteredDat, aes(x = pc1, y = pc2, color = batch)) +
geom_point()  + labs(title='First Two PCs ',color='Mouse (Batch)')
p
head(pcs$eig)
table(jeager2018_meta$source_name)
x <-('a','g','e','a','d',''t)
x <-('a','g','e','a','d','t')
x <-c('a','g','e','a','d','t')
x <-c(1,2,3)
apply(x, function(y) y+1)
sapply(x, function(y) y+1)
grepl("1+2", "1+2+3", fixed=TRUE)
as.factor(sapply(jeager2018_meta$source_name[filtered.idx],                                        function(y) if grepl("_F_", y, fixed=TRUE) "Fos+" else "Fos-"  ))
as.factor(sapply(jeager2018_meta$source_name[filtered.idx], function(y) if grepl("_F_", y, fixed=TRUE) "Fos+" else "Fos-"  ))
sapply(jeager2018_meta$source_name[filtered.idx], function(y) if grepl("_F_", y, fixed=TRUE) "Fos+" else "Fos-")
sapply(jeager2018_meta$source_name[filtered.idx], function(y) if (grepl("_F_", y, fixed=TRUE)) "Fos+" else "Fos-")
p <- ggplot(data = filteredDat, aes(x = pc1, y = pc2, color = batch)) +
geom_point()  +
labs(title='First Two PCs ',
color='Mouse (Batch)') +
theme(plot.title = element_text(hjust = 0.5))
p
x <- c("up","speak")
as.character(x)
paste(x[1],x[2], sep='')
x <- c("up",speak)
dim(pcs$eig)
colnames(pcs$eig)
pcs$eig[1,2]
roud(pcs$eig[1,2])
round(pcs$eig[1,2])
round(pcs$eig[1,2],2)
axislabs <-c(paste("PC1 (", as.character(round(pcs$eig[1,2],2)),")", sep =''),
paste("PC2 (", as.character(round(pcs$eig[2,2],2)),")", sep =''))
axislabs <-c(paste("PC1 (", as.character(round(pcs$eig[1,2],2)),"% of varience)", sep =''),
paste("PC2 (", as.character(round(pcs$eig[2,2],2)),"% of varience)", sep =''))
p <- ggplot(data = filteredDat, aes(x = pc1, y = pc2, color = batch)) +
geom_point()  +
labs(title='First Two PCs ',
color='Batch (Mouse)') +
xlab(axislabs[1]) +
ylab(axislabs[2]) +
theme(plot.title = element_text(hjust = 0.5))
p
filteredDat <- jeager2018_tpm[,filtered.idx]
filteredDat[is.na(filteredDat)] = 0
filteredDat <- t(filteredDat)
filteredDat <- data.frame(filteredDat)
filteredDat$batch <- as.factor(jeager2018_meta$Mouse_Number[filtered.idx])
filteredDat$fos_status <- as.factor(sapply(as.character(jeager2018_meta$source_name[filtered.idx]), function(y) if (grepl("_F_", y, fixed=TRUE)) "Fos+" else "Fos-"  ))
#using FactoMineR PCA function
pcs <- PCA(filteredDat,
quali.sup=c(40222, 40223), #to identify batch as a qualitative variable
graph = FALSE)
#putting pcs into our dataframe
filteredDat$pc1 <- pcs$ind$coord[, 1]
filteredDat$pc2 <- pcs$ind$coord[, 2]
#calls pcs object to get variences rounds them to 2nd digit makes string for axis labels
axislabs <-c(paste("PC1 (", as.character(round(pcs$eig[1,2],2)),"% of varience)", sep =''),
paste("PC2 (", as.character(round(pcs$eig[2,2],2)),"% of varience)", sep =''))
p <- ggplot(data = filteredDat, aes(x = pc1, y = pc2, color = batch, shape = fos_status)) +
geom_point()  +
labs(title='First Two PCs ',
color='Batch (Mouse)') +
xlab(axislabs[1]) +
ylab(axislabs[2]) +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(data = filteredDat, aes(x = pc1, y = pc2, color = batch, shape = fos_status)) +
geom_point()  +
labs(title='First Two PCs ',
color='Batch (Mouse)',
shape='Fos Status') +
xlab(axislabs[1]) +
ylab(axislabs[2]) +
theme(plot.title = element_text(hjust = 0.5))
p
#calls pcs object to get variences rounds them to 2nd digit makes string for axis labels
axislabs <-c(paste("PC1 (", as.character(round(pcs$eig[1,2],2)),"% of varience)", sep =''),
paste("PC2 (", as.character(round(pcs$eig[2,2],2)),"% of varience)", sep =''))
p <- ggplot(data = filteredDat, aes(x = pc1, y = pc2, color = batch, shape = fos_status)) +
geom_point()  +
labs(title='First Two PCs ',
color='Batch (Mouse)',
shape='Fos Status') +
xlab(axislabs[1]) +
ylab(axislabs[2]) +
theme(plot.title = element_text(hjust = 0.5))
p
dim(filteredDat)
colnames(filteredDat[,c(40221:40225)])
filteredDat$celltype <- as.factor(jeager2018_meta$predicted_cell_type[filtered.idx])
filteredDat$celltype <- as.factor(as.character(jeager2018_meta$predicted_cell_type[filtered.idx]))
set.seed(223)
tSNE_fit <- filteredDat[, c(1:40223,20226)] %>%
select(where(is.numeric)) %>%
column_to_rownames("ID") %>%
scale() %>%
Rtsne()
library(Rtsne)
tSNE_fit <- filteredDat[, c(1:40223,20226)] %>%
select(where(is.numeric)) %>%
column_to_rownames("ID") %>%
scale() %>%
Rtsne()
library(dplyr)
set.seed(223)
tSNE_fit <- filteredDat[, c(1:40223,20226)] %>%
select(where(is.numeric)) %>%
column_to_rownames("ID") %>%
scale() %>%
Rtsne()
where(is.numeric(filteredDat[, c(1:40223,20226)]))
library(tidyverse)
tSNE_fit <- filteredDat[, c(1:40223,20226)] %>%
select(where(is.numeric)) %>%
column_to_rownames("ID") %>%
scale() %>%
Rtsne()
set.seed(223)
tSNE_fit <- filteredDat[, c(1:40223,20226)] %>%
as_tibble() %>%
select(where(is.numeric)) %>%
column_to_rownames("ID") %>%
scale() %>%
Rtsne()
tSNE_fit <- filteredDat[, c(1:40223,20226)] %>%
as_tibble()
select(where(is.numeric(tSNE_fit)))
View(tSNE_fit)
typeof(tSNE_fit)
head(tSNE_fit)
head(is.numeric(tSNE_fit))
head(where(is.numeric(tSNE_fit)))
where?
where()?
?where
library(tidyverse)
library(palmerpenguins)
library(Rtsne)
install.packages("palmerpenguins")
setwd("C:/Users/angus/Desktop/PavLabEngrams/EngramCellClassifier")
library(tidyverse)
library(GEOquery)
library(AnnotationDbi)
library(randomForest)
library(data.table)
library(reshape2)
library(FactoMineR)
library(factoextra)
library(Rtsne)
# Jeager et al., (2018) meta data and tpm
jeager2018_tpm <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_tpm.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_tpm.txt.gz', header = TRUE, check.names = FALSE))
#We are using the tpms provided to skip some of the filtering steps, but if desreed here's where they are.
#There are 2581 genes excluded after filtering.
#
jeager2018_counts <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_count.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_count.txt.gz', header = TRUE, check.names = FALSE))
jeager2018_meta <- read.csv('Jeager2018_GSE98679/SraRunTable.txt', header = TRUE)
jeager2018_meta = jeager2018_meta[c(1:46,599:912,47:598),] #we need to fix Jeager's files up a bit
rownames(jeager2018_meta) <- c(1:912)
# blank.to.DG <-function(x){
#   if(x==""){
#     x="DG"
#   }
# }
jeager2018_meta$predicted_cell_type <- as.character(lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x}))
jeager2018_meta$predicted_cell_type <- lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x})
#ditch mousingle_number, put it into Mouse_Number
jeager2018_meta$Mouse_Number[361:912] <- jeager2018_meta$mousingle_number[361:912]
jeager2018_meta <- jeager2018_meta[,c(1:33,35,36)]
test2 <- sapply(jeager2018_counts[,c(1:360)], function(y) sum(length(which(y>0))))
# which(test2<4000)
# X151207_E12_N_C_F_EE_2 X151207_H12_N_C_F_EE_2  X151214_F1_P_C_N_EE_3  X151214_H1_P_C_N_EE_3 X151214_H11_P_C_F_EE_3             X160107_07
#                     49                     83                    123                    137                    139                    199
#             X160107_08             X160107_22             X160107_23             X160107_29             X160118_09             X160118_14
#                    200                    214                    215                    221                    249                    254
#             X160118_16             X160118_17             X160118_21             X160118_27             X160118_28             X160118_29
#                    256                    257                    261                    267                    268                    269
#             X160118_30             X160118_31
#                    270                    271
# > length(which(test2>3999))
# [1] 340
filtered.idx <- as.numeric(which(test2>4000))
filtered.idx <- order(c(filtered.idx,194))
print("Average gene's passing threshold per cell:")
print(meangenecounts(jeager2018_tpm[,filtered.idx]))
meangenecounts <- function(tpm.df){
test <- log(tpm.df+1, 2)>1 #log base 2 tpm counts +1 over 1
return(mean(as.numeric(colSums(test, na.rm = TRUE))))
}
test2 <- sapply(jeager2018_counts[,c(1:360)], function(y) sum(length(which(y>0))))
# which(test2<4000)
# X151207_E12_N_C_F_EE_2 X151207_H12_N_C_F_EE_2  X151214_F1_P_C_N_EE_3  X151214_H1_P_C_N_EE_3 X151214_H11_P_C_F_EE_3             X160107_07
#                     49                     83                    123                    137                    139                    199
#             X160107_08             X160107_22             X160107_23             X160107_29             X160118_09             X160118_14
#                    200                    214                    215                    221                    249                    254
#             X160118_16             X160118_17             X160118_21             X160118_27             X160118_28             X160118_29
#                    256                    257                    261                    267                    268                    269
#             X160118_30             X160118_31
#                    270                    271
# > length(which(test2>3999))
# [1] 340
filtered.idx <- as.numeric(which(test2>4000))
filtered.idx <- order(c(filtered.idx,194))
print("Average gene's passing threshold per cell:")
print(meangenecounts(jeager2018_tpm[,filtered.idx]))
print("Total missing entries in first dataset:")
print(sum(is.na(jeager2018_tpm[,filtered.idx])))
filteredDat <- jeager2018_tpm[,filtered.idx]
filteredDat[is.na(filteredDat)] = 0
filteredDat <- t(filteredDat)
filteredDat <- data.frame(filteredDat)
filteredDat$batch <- as.factor(jeager2018_meta$Mouse_Number[filtered.idx])
filteredDat$fos_status <- as.factor(sapply(as.character(jeager2018_meta$source_name[filtered.idx]), function(y) if (grepl("_F_", y, fixed=TRUE)) "Fos+" else "Fos-"  ))
#using FactoMineR PCA function
pcs <- PCA(filteredDat,
quali.sup=c(40222, 40223), #to identify batch as a qualitative variable
graph = FALSE)
#putting pcs into our dataframe
filteredDat$pc1 <- pcs$ind$coord[, 1]
filteredDat$pc2 <- pcs$ind$coord[, 2]
#calls pcs object to get variences rounds them to 2nd digit makes string for axis labels
axislabs <-c(paste("PC1 (", as.character(round(pcs$eig[1,2],2)),"% of varience)", sep =''),
paste("PC2 (", as.character(round(pcs$eig[2,2],2)),"% of varience)", sep =''))
p <- ggplot(data = filteredDat, aes(x = pc1, y = pc2, color = batch, shape = fos_status)) +
geom_point()  +
labs(title='First Two PCs of HC and NE neurons from Jeager et al., (2018)',
color='Batch (Mouse)',
shape='Fos Status') +
xlab(axislabs[1]) +
ylab(axislabs[2]) +
theme(plot.title = element_text(hjust = 0.5))
p
library(dplyr)
filteredDat$celltype <- as.factor(as.character(jeager2018_meta$predicted_cell_type[filtered.idx]))
set.seed(223)
colnames(filteredDat)[c(40220:40226)]
tSNE_fit <- filteredDat[, c(1:40221)] %>%
scale() %>%
Rtsne()
sum(is.na(filteredDat))
which(rownames(filteredDat)=='Arc')
rownames(filteredDat)=='arc'
which(rownames(filteredDat)=='arc')
which(rownames(jeager2018_counts)=="Arc")
which(colnames(filteredDat)=="Arc")
table(filteredDat$celltype)
arc_expr = which(colnames(filteredDat)=="Arc")
print(arc_expr)
hist(filteredDat[filteredDat$celltype=="CA1", arc_expr])
arc_expr = which(colnames(filteredDat)=="Arc")
fos_expr = which(colnames(filteredDat)=="Fos")
print(paste("Arc expression is on columne ",arc_expr))
print(paste("Fos expression is on columne ",arc_expr))
arc_expr = which(colnames(filteredDat)=="Arc")
fos_expr = which(colnames(filteredDat)=="Fos")
print(paste("Arc expression is on column ",arc_expr))
print(paste("Fos expression is on column ",fos_expr))
ca1fosvarc <- filteredDat[filteredDat$celltype=="CA1", c(arc_expr,fos_expr,40223)]
View(ca1fosvarc)
colnames(ca1fosvarc)
ca1fosvarc <- filteredDat[filteredDat$celltype=="CA1", c(arc_expr,fos_expr,40223)]
p <- ggplot(ca1fosvarc, aes(x = Arc, y = Fos)) +
geom_point(color = fos_status) +
ggtitle("Arc vs Fos expression and status in CA1") +
labs(color = 'Fos Status') +
theme(plot.title = element_text(hjust = 0.5))
ca1fosvarc <- filteredDat[filteredDat$celltype=="CA1", c(arc_expr,fos_expr,40223)]
p <- ggplot(ca1fosvarc, aes(x = Arc, y = Fos, color = fos_status)) +
geom_point() +
ggtitle("Arc vs Fos expression and status in CA1") +
labs(color = 'Fos Status') +
theme(plot.title = element_text(hjust = 0.5))
p
hist(filteredDat[filteredDat$celltype=="CA1", fos_expr])
p <- ggplot(ca1fosvarc, aes(x = Arc, y = Fos, color = fos_status)) +
geom_point() +
ggtitle("Arc vs Fos expression and status in CA1") +
labs(color = 'Fos Status') +
xlab("Arc (tpm)")+
ylab("Fos (tpm)")+
theme(plot.title = element_text(hjust = 0.5))
p
dgfosvarc <- filteredDat[filteredDat$celltype=="DG", c(arc_expr,fos_expr,40223)]
p <- ggplot(dgfosvarc, aes(x = Arc, y = Fos, color = fos_status)) +
geom_point() +
ggtitle("Arc vs Fos expression and status in DG") +
labs(color = 'Fos Status') +
xlab("Arc (tpm)")+
ylab("Fos (tpm)")+
theme(plot.title = element_text(hjust = 0.5))
p
table(filteredDat$celltype)
Ivyfosvarc <- filteredDat[filteredDat$celltype=="Ivy", c(arc_expr,fos_expr,40223)]
p <- ggplot(Ivyosvarc, aes(x = Arc, y = Fos, color = fos_status)) +
geom_point() +
ggtitle("Arc vs Fos expression and status in Ivy+ Gabanergic neurons") +
labs(color = 'Fos Status') +
xlab("Arc (tpm)")+
ylab("Fos (tpm)")+
theme(plot.title = element_text(hjust = 0.5))
p <- ggplot(Ivyfosvarc, aes(x = Arc, y = Fos, color = fos_status)) +
geom_point() +
ggtitle("Arc vs Fos expression and status in Ivy+ Gabanergic neurons") +
labs(color = 'Fos Status') +
xlab("Arc (tpm)")+
ylab("Fos (tpm)")+
theme(plot.title = element_text(hjust = 0.5))
p
VIPfosvarc <- filteredDat[filteredDat$celltype=="VIP", c(arc_expr,fos_expr,40223)]
p <- ggplot(Ivyfosvarc, aes(x = Arc, y = Fos, color = fos_status)) +
geom_point() +
ggtitle("Arc vs Fos expression and status in VIP+ Gabanergic neurons") +
labs(color = 'Fos Status') +
xlab("Arc (tpm)")+
ylab("Fos (tpm)")+
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(VIPfosvarc, aes(x = Arc, y = Fos, color = fos_status)) +
geom_point() +
ggtitle("Arc vs Fos expression and status in VIP+ Gabanergic neurons") +
labs(color = 'Fos Status') +
xlab("Arc (tpm)")+
ylab("Fos (tpm)")+
theme(plot.title = element_text(hjust = 0.5))
p
colnames(filteredDat)
colnames(filteredDat)[40223]
colnames(filteredDat)[40222]
DGdat <-filteredDat[filteredDat$celltype=="DG", c(1:40221,40223)]
#using FactoMineR PCA function
pcs <- PCA(DGdat,
quali.sup=c(40222), #to identify fos status
graph = FALSE)
#putting pcs into our dataframe
DGdat$pc1 <- pcs$ind$coord[, 1]
DGdat$pc2 <- pcs$ind$coord[, 2]
axislabs <-c(paste("PC1 (", as.character(round(pcs$eig[1,2],2)),"% of varience)", sep =''),
paste("PC2 (", as.character(round(pcs$eig[2,2],2)),"% of varience)", sep =''))
p <- ggplot(data = DGdat, aes(x = pc1, y = pc2, color = fos_status)) +
geom_point()  +
labs(title='First Two PCs of HC and NE neurons from Jeager et al., (2018)',
color= 'Fos Status') +
xlab(axislabs[1]) +
ylab(axislabs[2]) +
theme(plot.title = element_text(hjust = 0.5))
p
p <- ggplot(data = DGdat, aes(x = pc1, y = pc2, color = fos_status)) +
geom_point()  +
labs(title='PCs and Fos Status of DG granule Neurons',
color= 'Fos Status') +
xlab(axislabs[1]) +
ylab(axislabs[2]) +
theme(plot.title = element_text(hjust = 0.5))
p
CA1dat <-filteredDat[filteredDat$celltype=="CA1", c(1:40221,40223)]
#using FactoMineR PCA function
pcs <- PCA(CA1dat,
quali.sup=c(40222), #to identify fos status
graph = FALSE)
#putting pcs into our dataframe
CA1dat$pc1 <- pcs$ind$coord[, 1]
CA1dat$pc2 <- pcs$ind$coord[, 2]
#calls pcs object to get variences rounds them to 2nd digit makes string for axis labels
axislabs <-c(paste("PC1 (", as.character(round(pcs$eig[1,2],2)),"% of varience)", sep =''),
paste("PC2 (", as.character(round(pcs$eig[2,2],2)),"% of varience)", sep =''))
p <- ggplot(data = CA1dat, aes(x = pc1, y = pc2, color = fos_status)) +
geom_point()  +
labs(title='PCs and Fos Status of CA1 Neurons',
color= 'Fos Status') +
xlab(axislabs[1]) +
ylab(axislabs[2]) +
theme(plot.title = element_text(hjust = 0.5))
p
VIPdat <-filteredDat[filteredDat$celltype=="VIP", c(1:40221,40223)]
#using FactoMineR PCA function
pcs <- PCA(VIPdat,
quali.sup=c(40222), #to identify fos status
graph = FALSE)
#putting pcs into our dataframe
VIPdat$pc1 <- pcs$ind$coord[, 1]
VIPdat$pc2 <- pcs$ind$coord[, 2]
#calls pcs object to get variences rounds them to 2nd digit makes string for axis labels
axislabs <-c(paste("PC1 (", as.character(round(pcs$eig[1,2],2)),"% of varience)", sep =''),
paste("PC2 (", as.character(round(pcs$eig[2,2],2)),"% of varience)", sep =''))
p <- ggplot(data = VIPdat, aes(x = pc1, y = pc2, color = fos_status)) +
geom_point()  +
labs(title='PCs and Fos Status of VIP+ Gabanergic neurons',
color= 'Fos Status') +
xlab(axislabs[1]) +
ylab(axislabs[2]) +
theme(plot.title = element_text(hjust = 0.5))
p
#
#
#
#
#
# first attempt at a classifier
setwd("C:/Users/angus/Desktop/PavLabEngrams/EngramCellClassifier")
chen2020_counts <- read.table('Chen2020_GSE152632/GSE152632_GEO_mberkchen_TRAP2_counts.csv.gz')
View(chen2020_counts)
chen2020_counts <- read.csv('Chen2020_GSE152632/GSE152632_GEO_mberkchen_TRAP2_counts.csv.gz', header = TRUE)
chen2020_meta <- read.csv( 'Chen2020_GSE152632/SraRunTable.txt', header = TRUE)
View(chen2020_counts)
jeager2018_tpm <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_tpm.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_tpm.txt.gz', header = TRUE, check.names = FALSE))
jeager2018_tpm <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_tpm.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_tpm.txt.gz', header = TRUE, check.names = FALSE))
library(tidyverse)
library(GEOquery)
library(AnnotationDbi)
library(randomForest)
library(data.table)
library(reshape2)
library(FactoMineR)
library(factoextra)
library(Rtsne)
jeager2018_tpm <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_tpm.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_tpm.txt.gz', header = TRUE, check.names = FALSE))
#We are using the tpms provided to skip some of the filtering steps, but if desreed here's where they are.
#There are 2581 genes excluded after filtering.
#
jeager2018_counts <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_count.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_count.txt.gz', header = TRUE, check.names = FALSE))
jeager2018_tpm <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_tpm.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_tpm.txt.gz', header = TRUE, check.names = FALSE))
#We are using the tpms provided to skip some of the filtering steps, but if desreed here's where they are.
#There are 2581 genes excluded after filtering.
#
jeager2018_counts <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_count.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_count.txt.gz', header = TRUE, check.names = FALSE))
View(chen2020_meta)
table(chen2020_meta)
table(chen2020_meta$source_name)
colnames(chen2020_meta)
colnames(chen2020_counts)
colnames(chen2020_counts)[1000:2000]
colnames(chen2020_counts)[2000:3000]
colnames(chen2020_counts)[3000:3531]
table(chen2020_meta$source_name)
