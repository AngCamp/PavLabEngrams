humanreadable.labels[8:57]
# White Males -------------------------------------------------------------
temp=imputed[imputed$sex=="M" & imputed$race_ethnicity==1,]
predictors=c(9:13,16:22,25:57)
colnames(temp)[predictors]
pvalplot<-function(var) {
pvalall<-as.data.frame(c(t(var[order])))#needs order or the variabls don't correspond to the domains
pvalall$Sample_Size<-c((1:(5*162)),(1:(11*162)),(1:(3*162)),(1:(5*162)),(1:(13*162)),(1:(3*162)),(1:(5*162)))
pvalall$Group<-c(rep("Physical",5*162),rep("Perinatal",11*162),rep("Developmental",3*162),
rep("Lifestyle-Life Events",5*162),rep("Parental-Family",13*162),rep("School",3*162),
rep("Neighborhood",5*162))
pvalall[,1]<-ifelse(pvalall[,1]<1e-20,1e-20,pvalall[,1])
names(pvalall)[1]<-"P-Values"
p<-ggplot(pvalall,aes(x = 1:nrow(pvalall), y = -log10(pvalall[,1])))+
geom_point(aes(color = Group,size=5),
alpha = 0.7, size=5)
p+ylab(expression(atop(" -log10(P-Values)")))+xlab(expression(atop("Domains")))+
theme(legend.title=element_blank())+
theme_classic()+
theme(axis.title.x = element_text(size = 25))+
theme(axis.title.y = element_text(size = 25))+
theme(text = element_text(size=25))+
theme(legend.title=element_blank())+
theme(legend.position=c(0.8,0.7))+
geom_abline(slope=0,intercept=-log10(c(var)[astsa::FDR(c(var))]),linetype = "dashed")+
geom_abline(slope=0,intercept=5.2,linetype = "dashed")+
theme(axis.text.x = element_blank(),
axis.ticks.x=element_blank())+
theme(
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6))+
annotate("text",  label = expression(paste("FDR P-value","=0.05")),size=7, x=1000,y=-log10(c(var)[astsa::FDR(c(var))])-0.5, color="black",parse=TRUE)+
annotate("text",  label = expression(paste("Bonferroni P-value","=0.05")),size=7, x=1000,y=5.7, color="black",parse=TRUE)
}
fml<-lmer(temp[,308]~interview_age+rel_relationship+ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+  #this models random effect for site
(1|mri_info_deviceserialnumber:rel_family_id)+#this  models random effect by nesting family
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)
summary(fml)
summary(fml)[["coefficients"]]
isSingular(fml)
rePCA(fml)
pcs=rePCA(fml)
pcs$`mri_info_deviceserialnumber:rel_family_id`
pmat<-matrix(0, length(predictors),length(outcomes))
tmat<-matrix(0, length(predictors),length(outcomes))
bmat<-matrix(0, length(predictors),length(outcomes))
semat<-matrix(0, length(predictors),length(outcomes))
#name the rows and columns
rownames(pmat)=expnames
rownames(tmat)=expnames
rownames(bmat)=expnames
rownames(semat)=expnames
colnames(pmat)=colnames(temp)[outcomes]
colnames(tmat)=colnames(temp)[outcomes]
colnames(bmat)=colnames(temp)[outcomes]
colnames(semat)=colnames(temp)[outcomes]
temp=imputed[imputed$sex=="M" & imputed$race_ethnicity==1,]
temp$ehi_y_ss_scoreb<-as.factor(temp$ehi_y_ss_scoreb)
temp$rel_relationship<-as.factor(temp$rel_relationship)
temp$rel_family_id<-as.factor(temp$rel_family_id)
iterj=0
for (j in outcomes[1:3]) {
iterj=iterj+1
fml<-lmer( temp[,j]~interview_age+rel_relationship+
ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+
(1|mri_info_deviceserialnumber:rel_family_id)+
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)  #linear mixed model
iteri = 0
for ( i in predictors) {
iteri=iteri+1
pmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,5] #capture the pvalues
std<-stdCoef.merMod(fml)  #calculate standardized coefficients
bmat[iteri,iterj]<-std[9,1]  #capture the regression coefficients
tmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,4] #capture the t-values
semat[iteri,iterj]<-std[9,2] #capture the se
}
}
View(pmat)
install.packages("tictoc")
library(tictoc)
tic()
fml<-lmer(temp[,308]~interview_age+rel_relationship+ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+  #this models random effect for site
(1|mri_info_deviceserialnumber:rel_family_id)+#this  models random effect by nesting family
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)
toc()
Sys.Date()
paste(Sys.Data(), Sys.time(), sep ="_")
paste(Sys.Date(), Sys.time(), sep ="_")
length(Sys.time())
Sys.time()[5]
Sys.time()[[5]]
paste(Sys.Date(), "Attmpt1", sep ="_")
paste(Sys.Date(), "Attempt1", sep ="_")
tic()
temp=imputed[imputed$sex=="M" & imputed$race_ethnicity==1,]
temp$ehi_y_ss_scoreb<-as.factor(temp$ehi_y_ss_scoreb)
temp$rel_relationship<-as.factor(temp$rel_relationship)
temp$rel_family_id<-as.factor(temp$rel_family_id)
#select predictors and outcomes
predictors=c(9:13,16:22,25:57)
outcomes=c(77:147,219:309)
psychopathology=c(58:76) #not used here nor is sulcal depth
#create empty matrices to populate with a for loop
#pmat=matrix of p-values
#tmat=matrix of t-values
#bmat=matrix of standardized regression coefficients
#semat=matrix of stanard errors of regression coefficeints
pmat<-matrix(0, length(predictors),length(outcomes))
tmat<-matrix(0, length(predictors),length(outcomes))
bmat<-matrix(0, length(predictors),length(outcomes))
semat<-matrix(0, length(predictors),length(outcomes))
#name the rows and columns
rownames(pmat)=expnames
rownames(tmat)=expnames
rownames(bmat)=expnames
rownames(semat)=expnames
colnames(pmat)=colnames(temp)[outcomes]
colnames(tmat)=colnames(temp)[outcomes]
colnames(bmat)=colnames(temp)[outcomes]
colnames(semat)=colnames(temp)[outcomes]
#start the for loop to go over full model for each by
iterj=0
for (j in outcomes) {
iterj=iterj+1
fml<-lmer( temp[,j]~interview_age+rel_relationship+
ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+
(1|mri_info_deviceserialnumber:rel_family_id)+
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)  #linear mixed model
iteri = 0
for ( i in predictors) {
iteri=iteri+1
pmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,5] #capture the pvalues
std<-stdCoef.merMod(fml)  #calculate standardized coefficients
bmat[iteri,iterj]<-std[9,1]  #capture the regression coefficients
tmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,4] #capture the t-values
semat[iteri,iterj]<-std[9,2] #capture the se
}
}
toc()
tic()
temp=imputed[imputed$sex=="M" & imputed$race_ethnicity==1,]
temp$ehi_y_ss_scoreb<-as.factor(temp$ehi_y_ss_scoreb)
temp$rel_relationship<-as.factor(temp$rel_relationship)
temp$rel_family_id<-as.factor(temp$rel_family_id)
#select predictors and outcomes
predictors=c(9:13,16:22,25:57)
outcomes=c(77:147,219:309)
psychopathology=c(58:76) #not used here nor is sulcal depth
#create empty matrices to populate with a for loop
#pmat=matrix of p-values
#tmat=matrix of t-values
#bmat=matrix of standardized regression coefficients
#semat=matrix of stanard errors of regression coefficeints
pmat<-matrix(0, length(predictors),length(outcomes))
tmat<-matrix(0, length(predictors),length(outcomes))
bmat<-matrix(0, length(predictors),length(outcomes))
semat<-matrix(0, length(predictors),length(outcomes))
#name the rows and columns
rownames(pmat)=expnames
rownames(tmat)=expnames
rownames(bmat)=expnames
rownames(semat)=expnames
colnames(pmat)=colnames(temp)[outcomes]
colnames(tmat)=colnames(temp)[outcomes]
colnames(bmat)=colnames(temp)[outcomes]
colnames(semat)=colnames(temp)[outcomes]
#start the for loop to go over full model for each by
iterj=0
for (j in outcomes[1:3]) {
iterj=iterj+1
fml<-lmer( temp[,j]~interview_age+rel_relationship+
ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+
(1|mri_info_deviceserialnumber:rel_family_id)+
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)  #linear mixed model
iteri = 0
for ( i in predictors) {
iteri=iteri+1
pmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,5] #capture the pvalues
std<-stdCoef.merMod(fml)  #calculate standardized coefficients
bmat[iteri,iterj]<-std[9,1]  #capture the regression coefficients
tmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,4] #capture the t-values
semat[iteri,iterj]<-std[9,2] #capture the se
}
}
toc()
install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
library(ggseg)
library(ggplot2)
# ##################################### install 'ggseg' package for visulization purpose
# install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
# ##################################### install 'ggseg' package for visulization purpose
# install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
library(Rcpp)
remove.packages("Rcpp", lib="~/R/win-library/4.1")
remove.packages("utf8", lib="~/R/win-library/4.1")
remove.packages("cli", lib="~/R/win-library/4.1")
remove.packages("tibble", lib="~/R/win-library/4.1")
remove.packages("colorspace", lib="~/R/win-library/4.1")
# ##################################### install 'ggseg' package for visulization purpose
# install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
# ##################################### install 'ggseg' package for visulization purpose
# install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
exposures=c(9:13,16:22,25:57)
categorical = c(7, 8, 13, 16, 33, 37, 38, 39, 40, 41, 45, 46, 47, 50, 52, 55, 56) #categorical yes/no
ordinal= c( 12, 43, 44, 51, 54)
continuous = c(2,exposures[!(exposures %in% categorical)])
continuous
getcd()
getcwd()
getwd()
humanreadable.labels[expossures]
humanreadable.labels=read.table("C:/Users/angus/Desktop/Angus_Master_Plan_Data_Scripts/Data_and_scripts/Humanreadableimputedcolnames.csv", sep = ",")[2:319,2]
exposures=c(9:13,16:22,25:57) #equivalent to predictors in amirs scripts, note they are rearanged for presentation by order
humanreadable.labels[exposures]
which(humanreadable.labels == "Trauma")
colnames(imputed)[16]
sum(imputed$trauma)
e = {{a,b},{a,c}}
e = {[a,b],[a,c]}
e = c([a,b],[a,c])
e = c(c(a,b),c(a,c))
e = c(c('a','b'),c('a','c'))
e[1]
e[1][1]
e[1][2]
library(tidyverse)
library(GEOquery)
library(edgeR)
library(umap)
library(limma)
library(knitr)
library(readxl)
library(eulerr)
library(ermineR)
library(sgof)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(GEOquery)
library(tidyverse)
#library(umap)
library(limma)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
str(gds)
head(Meta(gds))
test <- filename=system.file("GSE152632_series_matrix.txt.gz",package="GEOquery"))
test <- getGEO(filename=system.file("GSE152632_series_matrix.txt.gz",package="GEOquery"))
#library(umap)
library(limma)
Sys.setenv("VROOM_CONNECTION_SIZE")
library(tidyverse)
library(GEOquery)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
Sys.setenv("VROOM_CONNECTION_SIZE")
Sys.setenv("VROOM_CONNECTION_SIZE", "200000")
help(Sys.setenv)
Sys.setenv(VROOM_CONNECTION_SIZE = "200000")
2e9
Sys.setenv(VROOM_CONNECTION_SIZE = 1e6)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
Sys.setenv(VROOM_CONNECTION_SIZE = 1e2)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
Sys.setenv(VROOM_CONNECTION_SIZE = 1e6)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
gds <- getGEO("GSE152632")
library(GEOquery)
gds <- getGEO("GSE152632")
Sys.setenv(VROOM_CONNECTION_SIZE = 1e6)
library(GEOquery)
gds <- getGEO("GSE152632")
head(Meta(getGEO("GSE152632")))
setwd("C:/Users/angus/Desktop/PavLabEngrams/EngramCellClassifier")
library(tidyverse)
library(GEOquery)
library(AnnotationDbi)
library(randomForest)
library(data.table)
# Jeager et al., (2018) meta data and counts
jeager2018_counts <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_count.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_count.txt.gz', header = TRUE, check.names = FALSE))
jeager2018_meta <- read.csv('Jeager2018_GSE98679/SraRunTable.txt', header = TRUE)
jeager2018_meta = jeager2018_meta[c(1:46,599:912,47:598),] #we need to fix Jeager's files up a bit
rownames(jeager2018_meta) <- c(1:912)
# blank.to.DG <-function(x){
#   if(x==""){
#     x="DG"
#   }
# }
jeager2018_meta$predicted_cell_type <- as.character(lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x}))
jeager2018_meta$predicted_cell_type <- lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x})
View(jeager2018_counts)
View(jeager2018_meta)
View(jeager2018_meta)
jeager2018_meta$Mouse_Number[359]
jeager2018_meta$Mouse_Number[360]
jeager2018_meta$Mouse_Number[361]
jeager2018_meta$mousingle_number[361]
jeager2018_meta$Mouse_Number[361:912] <- jeager2018_meta$mousingle_number[361:912]
c(1:33,35,36)
colnames(jeager2018_meta)[34]
jeager2018_meta <- jeager2018_meta[c(1:33,35,36),]
View(jeager2018_meta)
# Jeager et al., (2018) meta data and counts
jeager2018_counts <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_count.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_count.txt.gz', header = TRUE, check.names = FALSE))
jeager2018_meta <- read.csv('Jeager2018_GSE98679/SraRunTable.txt', header = TRUE)
jeager2018_meta = jeager2018_meta[c(1:46,599:912,47:598),] #we need to fix Jeager's files up a bit
rownames(jeager2018_meta) <- c(1:912)
# blank.to.DG <-function(x){
#   if(x==""){
#     x="DG"
#   }
# }
jeager2018_meta$predicted_cell_type <- as.character(lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x}))
jeager2018_meta$predicted_cell_type <- lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x})
#ditch mousingle_number, put it into Mouse_Number
jeager2018_meta$Mouse_Number[361:912] <- jeager2018_meta$mousingle_number[361:912]
jeager2018_meta <- jeager2018_meta[,c(1:33,35,36)]
jeager2018_v2_tpm <- read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_tpm.txt.gz')
jeager2018_tpm <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_tpm.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_tpm.txt.gz', header = TRUE, check.names = FALSE))
42802-40221
del jeager2018_v2_tpm
del(jeager2018_v2_tpm)
rm(jeager2018_v2_tpm)
dim(jeager2018_tpm)
rep(1:3)
rep(Na,1:3)
test <- jeager2018_tpm>1
dim(test)
mean(1,2,3)
avg(1,2,3)
mean(4,5,6)
mean(c(1:3))
colSums(test)
mean(colSums(test))
mean(as.numeric(colSums(test)))
which(is.na(jeager2018_tpm))
length(which(is.na(jeager2018_tpm)))
which(is.na(jeager2018_tpm) arr.ind = TRUE)
which(is.na(jeager2018_tpm), arr.ind = TRUE)
unique(colnames(which(is.na(jeager2018_tpm), arr.ind = TRUE)))
unique((which(is.na(jeager2018_tpm), arr.ind = TRUE))[1,])
unique((which(is.na(jeager2018_tpm), arr.ind = TRUE))[,1])
type((which(is.na(jeager2018_tpm), arr.ind = TRUE)))
typeof((which(is.na(jeager2018_tpm), arr.ind = TRUE)))
table(which(is.na(jeager2018_tpm), arr.ind = TRUE))
table(test)
sum(is.na(test))
mean(as.numeric(colSums(test, na.rm = FALSE)))
colSums(test, na.rm = FALSE
colSums(test, na.rm = FALSE)
mean(as.numeric(colSums(test, na.rm = TRUE)))
sum(is.na(jeager2018_tpm))
meangenecounts <- function(tpm.df){
test <- tpm.df>1
return(mean(as.numeric(colSums(test, na.rm = TRUE))))
}
meangenecounts(jeager2018_tpm)
log(4,2)
log(8,2)
log(8)
meangenecounts <- function(tpm.df){
test <- log(tpm.df+1, 2)>1 #log base 2 tpm counts +1 over 1
return(mean(as.numeric(colSums(test, na.rm = TRUE)))) #mean
}
meangenecounts(jeager2018_tpm)
sum(is.na(jeager2018_tpm)) #how many missing gene values
print(meangenecounts(jeager2018_tpm)) #
print(sum(is.na(jeager2018_tpm))) #how many missing gene values
dim(jeager2018_tpm)
print(meangenecounts(jeager2018_tpm[,c(1:360)]))
print(c(3,"jergble")
print(c(3,"jergble"))
print(3,"jergble")
"gef" + " feg"
cat("gef"," feg")
print(sum(is.na(jeager2018_tpm[,c(1:360)]))) #how many missing gene values
print(sum(is.na(jeager2018_tpm[,c(1:360)]))) #how many missing gene values
print(meangenecounts(jeager2018_tpm[,c(1:360)])) #
print(sum(is.na(jeager2018_tpm[,c(1:360)]))) #how many missing gene values
sum(is.na(jeager2018_tpm[,c(360:912)]))
print(sum(is.na(jeager2018_tpm[,c(1:360)])))
mean(colSum)
print("Average gene's passing threshold per cell:")
print(meangenecounts(jeager2018_tpm[,c(1:360)]))
print("Total missing entries in first dataset:")
print(sum(is.na(jeager2018_tpm[,c(1:360)])))
test <-sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)||(y==0))))
test <-sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)||(y==0)))))
which(test>4000)
test
summary(test)
```{r}
```{r}
test <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)||(y==0)))))
summary(test)
```{r}
print(summary(test))
```{r}
```{r}
#print(test[1:20])
```{r}
```{r}
rm(test)
```{r}
test <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)||(y==0)))))
print(summary(test))
head(test)
test <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)||log(tpm.df+1, 2)>1))))
test <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)||log(y+1, 2)>1))))
summary(test)
test <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)||(y==0)))))
max(test)
test <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)||(y==0)))))
max(test)
test <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)||(y==0)))))
max(test)
test <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(is.na(y)))))
test
max(test)
length(which(is.na(y)))
length(which(is.na(y))))
length(which(is.na(jeager2018_tpm[,c(1:360)])))
sum(length(which(is.na(jeager2018_tpm[,c(1:360)]))))
test2 <- sapply(jeager2018_tpm[,c(1:360)], function(y) sum(length(which(y>1))))
min(test2)
max(test2)
test2 <- sapply(jeager2018_counts[,c(1:360)], function(y) sum(length(which(y>1))))
min(test2)
test2 <- sapply(jeager2018_counts[,c(1:360)], function(y) sum(length(which(y>0))))
summary(test2)
length(which(test2>4000))
which(test2<4000)
View(jeager2018_counts)
912-868
test2 <- sapply(jeager2018_counts[,c(1:360)], function(y) sum(length(which(y>1))))
length(test2)
