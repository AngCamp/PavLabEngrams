View(test)
colnames(test[[1]])
test[[1]]
str(test)
test@assays$RNA
test <- FindVariableFeatures(chen2020, selection.method = "mean.var.plot")
rm(test)
# in the tutorial they chose 2000, I just chose to match the number of cells we had
chen2020 <- ScaleData(chen2020)
?ScaleData
#library(Seurat)
chen2020 <- CreateSeuratObject(counts = chen2020_counts)
chen2020 <- FindVariableFeatures(chen2020, selection.method = "vst", nfeatures = 3530) #no idea how I chose 3530,
# in the tutorial they chose 2000, I just chose to match the number of cells we had
chen2020 <- ScaleData(chen2020)
#library(Seurat)
chen2020 <- CreateSeuratObject(counts = chen2020_counts)
#meta.data = chen2020_meta)
chen2020 <- FindVariableFeatures(chen2020, selection.method = "vst", nfeatures = 3530) #no idea how I chose 3530,
# in the tutorial they chose 2000, I just chose to match the number of cells we had
chen2020nobatch <- ScaleData(chen2020)
chen2020 <-
test = RunPCA(chen2020nobatch, features = VariableFeatures(chen2020))
test = RunPCA(chen2020nobatch, features = VariableFeatures(chen2020))
table(chen2020_meta$source_name)
setwd("C:/Users/angus/Desktop/PavLabEngrams/EngramCellClassifier")
library(tidyverse)
library(GEOquery)
library(AnnotationDbi)
library(randomForest)
library(data.table)
library(reshape2)
library(FactoMineR)
library(factoextra)
library(Rtsne)
library(dplyr)
library(Seurat)
library(stringr)
library(patchwork)
library(metap)
library(cqn)
library(GeoTcgaData)
# Lacar et al., (2016)
lacar2016_meta <- read.csv('Lacar2016_GSE77067/SraRunTable.txt', header = TRUE)
lacar2016_snHC_counts <- read.table('Lacar2016_GSE77067/GSE77067_sn_hc_counts.txt.gz')
lacar2016_snNE_counts <- read.table('Lacar2016_GSE77067/GSE77067_sn_ne_counts.txt.gz')
# Jeager et al., (2018) meta data and counts
jeager2018_counts <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_count.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_count.txt.gz', header = TRUE, check.names = FALSE))
jeager2018_meta <- read.csv('Jeager2018_GSE98679/SraRunTable.txt', header = TRUE)
jeager2018_meta = jeager2018_meta[c(1:46,599:912,47:598),] #we need to fix Jeager's files up a bit
rownames(jeager2018_meta) <- c(1:912)
# Jeager et al., (2018) meta data and counts
jeager2018_counts <- bind_cols(read.table('Jeager2018_GSE98679/GSE98679_count.txt.gz', header = TRUE, check.names = FALSE),
read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_count.txt.gz', header = TRUE, check.names = FALSE))
jeager2018_meta <- read.csv('Jeager2018_GSE98679/SraRunTable.txt', header = TRUE)
jeager2018_meta = jeager2018_meta[c(1:46,599:912,47:598),] #we need to fix Jeager's files up a bit
rownames(jeager2018_meta) <- c(1:912)
# blank.to.DG <-function(x){
#   if(x==""){
#     x="DG"
#   }
# }
jeager2018_meta$predicted_cell_type <- as.character(lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x}))
jeager2018_meta$predicted_cell_type <- lapply(jeager2018_meta$predicted_cell_type, function(x) if (x=="") {"DG"} else {x})
#Finding engram cells
fospos <- which(grepl("_F_DG",  jeager2018_meta$source_name))
fospos <- c(fospos,361:912) # since we know all the v2 cells from time points and recall testing
neg <- which(grepl("_N_DG",  jeager2018_meta$source_name))
jeager2018_meta$fos_status <- as.factor(sapply(as.character(jeager2018_meta$source_name), function(y) if (grepl("_F_", y, fixed=TRUE)) "Fos+" else "Fos-"  ))
#filtering out cells as per instructions in Jeager et al., 2018)
under4k <- sapply(jeager2018_counts, function(y) sum(length(which(y>0))))
filtered.idx <- as.numeric(which(under4k>4000))
filtered.idx <- order(c(filtered.idx,194))
jeager2018_counts <-jeager2018_counts[,filtered.idx]
jeager2018_meta <- jeager2018_meta[filtered.idx,]
testsetpath <- "C:/Users/angus/Desktop/test_datasets"
test_habib2016_logTPM <- read.table(paste(testsetpath,"/Habib2016/GSE85721_PROCESSED_data.sNuc-Seq_Data_RSEM_log_TPM.for_GEO.txt.gz",sep=""), header = TRUE)
rownames(test_habib2016_logTPM) <- test_habib2016_logTPM[, 1]  ## set rownames
test_habib2016_logTPM <- test_habib2016_logTPM[, 2:925]
#as well as some conditions, old young etc that will need parsing, read the pub
# then get on it
condition_label <- colnames(test_habib2016_logTPM)
habib2016.dg.idx <- which(str_detect(colnames(test_habib2016_logTPM), ".DG"))
# [1] 545 pf DG cells not a bad number  of cells to test on
test_habib2016_meta <- read.csv("test_datasets/Habib2016/SraRunTable.txt", header =TRUE, fill =TRUE)
rownames(test_habib2016_meta) <- colnames(test_habib2016_logTPM)
test_habib2016_meta <- read.csv(paste(testsetpath,"test_datasets/Habib2016/SraRunTable.txt",sep=""), header =TRUE, fill =TRUE)
test_habib2016_meta <- read.csv(paste(testsetpath,"/test_datasets/Habib2016/SraRunTable.txt",sep=""), header =TRUE, fill =TRUE)
test_habib2016_meta <- read.csv(paste(testsetpath,"/Habib2016/SraRunTable.txt",sep=""), header =TRUE, fill =TRUE)
rownames(test_habib2016_meta) <- colnames(test_habib2016_logTPM)
shared.genes.jeager <- c(rownames(test_habib2016_logTPM) %in% rownames(jeager2018_counts),
shared.genes.jeager <- rownames(jeager2018_counts) %in% rownames(test_habib2016_logTPM))
shared.genes.jeager <- rownames(test_habib2016_logTPM) %in% rownames(jeager2018_counts)
shared.genes.jeager <- rownames(jeager2018_counts) %in% rownames(test_habib2016_logTPM))
shared.genes.jeager <- rownames(test_habib2016_logTPM) %in% rownames(jeager2018_counts)
shared.genes.habib <- rownames(jeager2018_counts) %in% rownames(test_habib2016_logTPM)
shared.genes.habib <- rownames(test_habib2016_logTPM) %in% rownames(jeager2018_counts)
shared.genes.jeager <- rownames(jeager2018_counts) %in% rownames(test_habib2016_logTPM)
shared.genes.habib <- rownames(test_habib2016_logTPM)[shared.genes.habib]
shared.genes.jeager <- rownames(jeager2018_counts)[shared.genes.jeager]
shared.genes.habib[1:5]
shared.genes.jeager[1:5]
order(shared.genes.habib)[1:5]
order(shared.genes.jeager)[1:5]
shared.genes.jeager
shared.genes.habib
sum(shared.genes.habib %in% shared.genes.jeager)
order(shared.genes.habib)
order(shared.genes.jeager)
rownames(jeager2018_counts)[1:5]
which(rownames(jeager2018_counts)=="1")
?merge
test <- merge(jeager2018_counts, test_habib2016_logTPM, by = "row.names")
test <- merge(log(countToTpm_matrix(jeager2018_counts)), test_habib2016_logTPM, by = "row.names")
View(test)
test <- log(countToTpm_matrix(jeager2018_counts))
View(test)
test <- countToTpm_matrix(jeager2018_counts)
test <- countToTpm_matrix(jeager2018_counts)
View(jeager2018_counts)
test <- countToTpm_matrix(jeager2018_counts)
View(test)
hochgerner2018_counts <- read.table(paste(testsetpath,"/Hochgerner2018/GSE95315_10X_expression_data_v2.tab.gz", sep=""))
View(hochgerner2018_counts)
hochgerner2018_counts[1,3]
hochgerner2018_counts[3,1]
table(hochgerner2018_counts[3,])
View(jeager2018_meta)
table(jeaer2018_meta$AGE)
table(jeager2018_meta$AGE)
table(jeager2018_meta$AGE[jeager2018_meta$predicted_cell_type=="DG"])
sum(jeager2018_meta$predicted_cell_type=="DG")
unique(hochgerner2018_counts[3,])
hochgerner2018_counts[3,1:5]
as.character(hochgerner2018_counts[3,1:5])
table(as.character(hochgerner2018_counts[3,]))
as.character(hochgerner2018_counts[3,1:5])
as.character(hochgerner2018_counts[2,1:5])
table(as.character(hochgerner2018_counts[3,as.character(hochgerner2018_counts[2,1:5])=="35*"]))
table(as.character(hochgerner2018_counts[3,as.character(hochgerner2018_counts[2,1:5])=="24*"]))
table(as.character(hochgerner2018_counts[3,as.character(hochgerner2018_counts[2,1:5])=="24"]))
table(as.character(hochgerner2018_counts[3,as.character(hochgerner2018_counts[2,1:5])=="35"]))
hochgerner24k_2018_counts <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_10X_expression_data_V2.tab.gz", sep=""))
View(hochgerner2018_counts)
View(hochgerner24k_2018_counts)
rm(hochgerner24k_2018_counts)
hochgerner24k_2018_meta <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_metadata_barcodes_24185cells.txt.gz", sep=""))
hochgerner24k_2018_meta <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_metadata_barcodes_24185cells.txt.gz", sep="") fill =TRUE)
hochgerner24k_2018_meta <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_metadata_barcodes_24185cells.txt.gz", sep=""), fill =TRUE)
View(hochgerner24k_2018_meta)
hochgerner24k_2018_meta <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_metadata_barcodes_24185cells.txt.gz", sep=""), header =TRUE)
hochgerner24k_2018_meta <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_metadata_barcodes_24185cells.txt.gz", sep=""),
header =TRUE, fill =TRUE)
View(hochgerner24k_2018_meta)
which(rownames(test_habib2016_logTPM)=="Arc")
hist(test_habib2016_logTPM[22406,])
hist(test_habib2016_logTPM[,22406])
rownames(test_habib2016_logTPM)[22406]
density(test_habib2016_logTPM[22406,])
density(as.numeric(test_habib2016_logTPM[22406,]))
hist(as.numeric(test_habib2016_logTPM[22406,]))
table(as.numeric(test_habib2016_logTPM[22406,]))
which(rownames(test_habib2016_logTPM)=="Fos")
table(as.numeric(test_habib2016_logTPM[22530,]))
hist(as.numeric(test_habib2016_logTPM[22530,]))
sum(as.numeric(test_habib2016_logTPM[22530,])>0)
dim(test_habib2016_logTPM)
sum(as.numeric(test_habib2016_logTPM[22406,])>0)
sum(as.numeric(test_habib2016_logTPM[22406,habib2016.dg.idx])>0)
sum(as.numeric(test_habib2016_logTPM[22530,habib2016.dg.idx])>0)
habib2016.dg.idx
which(rownames(test_habib2016_logTPM)=="Tet3")
sum(as.numeric(test_habib2016_logTPM[10396,habib2016.dg.idx])>0)
which(rownames(test_habib2016_logTPM)=="Jund")
sum(as.numeric(test_habib2016_logTPM[1665,habib2016.dg.idx])>0)
which(rownames(test_habib2016_logTPM)=="Gadd45b")
sum(as.numeric(test_habib2016_logTPM[1645,habib2016.dg.idx])>0)
which(rownames(test_habib2016_logTPM)=="Atf3")
sum(as.numeric(test_habib2016_logTPM[20953,habib2016.dg.idx])>0)
hist(as.numeric(test_habib2016_logTPM[10396,habib2016.dg.idx])>0)
hist(as.numeric(test_habib2016_logTPM[10396,habib2016.dg.idx]))
hist(as.numeric(test_habib2016_logTPM[1665,habib2016.dg.idx]))
sum(as.numeric(test_habib2016_logTPM[1665,habib2016.dg.idx])>6)
sum(as.numeric(test_habib2016_logTPM[1665,habib2016.dg.idx])>5)
sum(as.numeric(test_habib2016_logTPM[1665,habib2016.dg.idx])>3)
sum(as.numeric(test_habib2016_logTPM[1665,habib2016.dg.idx])>4)
sum(as.numeric(test_habib2016_logTPM[1665,habib2016.dg.idx])>5)
sum(as.numeric(test_habib2016_logTPM[1665,habib2016.dg.idx])>6)
#gadd45b, Jund, Tet3,
persistant_gene <- test_habib2016_logTPM[c(1645,1665,10396,20953, 22530, 22406),habib2016.dg.idx]
View(persistant_gene)
persistant_gene <- t(persistant_gene)
which(persistant_gene$Fos>0&persistant_gene$Arc)
persistant_gene <- as.numeric(test_habib2016_logTPM[c(1645,1665,10396,20953, 22530, 22406),habib2016.dg.idx])
persistant_gene <- t(persistant_gene)
(persistant_gene$Arc>0)&(persistant_gene$Fos>0)
persistant_gene <- as.numeric(test_habib2016_logTPM[c(1645,1665,10396,20953, 22530, 22406),habib2016.dg.idx])
persistant_gene <- data.frame(t(persistant_gene))
(persistant_gene$Arc>0)&(persistant_gene$Fos>0)
sum((persistant_gene$Arc>0)&(persistant_gene$Fos>0))
sum((persistant_gene$Jund>0)&(persistant_gene$Atf3>0)&(persistant_gene$Gadd45b>0)&(persistant_gene$Tet3>0))
sum((persistant_gene$Jund>0)&(persistant_gene$Gadd45b>0)&(persistant_gene$Tet3>0))
sum((persistant_gene$Jund>0)&(persistant_gene$Arc>0))
sum((persistant_gene$Jund>0)&(persistant_gene$Fos>0))
sum((persistant_gene$Jund>0)&(persistant_gene$Fos>0)&(persistant_gene$Arc>0))
which(rownames(hochgerner2018_counts)=="Arc")
rownames(hochgerner)[1:5]
rownames(hochgerner2018_counts)[1:5]
View(hochgerner2018_counts)
rownames(hochgerner2018_counts) <- hochgerner2018_counts[,1]
which(rownames(hochgerner2018_counts)=="Arc")
engram_markers <- c("Arc","Fos","Jund", "Tet3", "Atf3", "Gadd45b")
for(i in engram_markers){
print(which(rownames(hochgerner2018_counts)==i))
}
engram_markers <- c("Arc","Fos","Jund", "Tet3", "Atf3", "Gadd45b")
marker.idx <- c()
for(i in engram_markers){
marker.idx <-c(marker.idx,(which(rownames(hochgerner2018_counts)==i)))
}
table(hochgerner2018_counts[3,])
table(hochgerner2018_counts[,3])
hochgerner2018.dg.idx <-which(as.character(hochgerner2018_counts[3,])=="DG")
table(as.character(hochgerner2018_counts[3,]))
hochgerner2018.dg.idx <-which(as.character(hochgerner2018_counts[3,])=="Granule-mature")
persistant_gene.hoch <- as.numeric(test_habib2016_logTPM[c(1645,1665,10396,20953, 22530, 22406),hochgerner2018.dg.idx])
persistant_gene.hoch <- as.numeric(test_habib2016_logTPM[marker.idx,hochgerner2018.dg.idx])
persistant_gene.hoch <- as.numeric(hochgerner2018_counts[marker.idx,hochgerner2018.dg.idx])
persistant_gene.hoch <- as.numeric(hochgerner2018_counts[as.numeric(marker.idx),as.numeric(hochgerner2018.dg.idx)])
persistant_gene.hoch <- hochgerner2018_counts[as.numeric(marker.idx),as.numeric(hochgerner2018.dg.idx)]
persistant_gene.hoch <- data.frame(t(persistant_gene.hoch))
View(persistant_gene.hoch)
sum((persistant_gene.hoch$Jund>0))
sum((persistant_gene.hoch$Fos>0))
sum((persistant_gene.hoch$Arc>0))
sum((persistant_gene.hoch$Jund>0)&(persistant_gene.hoch$Atf3>0)&(persistant_gene.hoch$Gadd45b>0)&(persistant_gene.hoch$Tet3>0))
sum((persistant_gene.hoch$Jund>0)&(persistant_gene.hoch$Gadd45b>0)&(persistant_gene.hoch$Tet3>0))
sum((persistant_gene.hoch$Jund>0))
sum((persistant_gene.hoch$Gadd45b>0)&(persistant_gene.hoch$Tet3>0))
hist(persistant_gene.hoch$Fos)
hist(as.numeric(persistant_gene.hoch$Fos))
table(persistant_gene.hoch$Fos)
table(as.numeric(t(jeager2018_counts)$Fos))
which(rownames(jeager2018_counts)=="Fos")
table(jeager2018_counts[8233,])
table(as.numeric(jeager2018_counts[8233,]))
hist(as.numeric(jeager2018_counts[8233,]))
which(rownames(jeager2018_counts)=="Arc")
hist(as.numeric(jeager2018_counts[3021,]))
hist(as.numeric(jeager2018_counts[3021,]))
table(as.numeric(jeager2018_counts[3021,]))
reactivation.markers <- c("Arc", "Fos", "Blnk", "Tnik", "Acan", "Entpd4", "Hes7")
persistant_gene <- as.numeric(test_habib2016_logTPM[ reactivation.markers, habib2016.dg.idx])
persistant_gene <- test_habib2016_logTPM[ reactivation.markers, habib2016.dg.idx]
persistant_gene <- data.frame(t(persistant_gene))
sum((persistant_gene$Blnk>0))
sum((persistant_gene$Blnk>0)&(persistant_gene$Arc>0))
sum((persistant_gene$Tnik>0)&(persistant_gene$Arc>0))
sum((persistant_gene$Acan>0)&(persistant_gene$Arc>0))
sum((persistant_gene$Entpd4>0)&(persistant_gene$Arc>0))
sum((persistant_gene$Hes7>0)&(persistant_gene$Arc>0))
reactivation.markers <- c("Arc", "Fos", "Blnk", "Tnik", "Acan", "Entpd4", "Hes7")
persistant_gene <- test_habib2016_logTPM[ reactivation.markers, habib2016.dg.idx]
persistant_gene <- data.frame(t(persistant_gene))
sum((persistant_gene$Hes7>0)&(persistant_gene$Arc>0))
marker.idx <- c()
for(i in reactivation.markers){
marker.idx <-c(marker.idx,(which(rownames(hochgerner2018_counts)==i)))
}
hochgerner2018.dg.idx <-which(as.character(hochgerner2018_counts[3,])=="DG")
persistant_gene.hoch <- hochgerner2018_counts[as.numeric(marker.idx),as.numeric(hochgerner2018.dg.idx)]
persistant_gene.hoch <- data.frame(t(persistant_gene.hoch))
sum((persistant_gene.hoch$Arc>0)&(persistant_gene.hoch$Blnk>0))
sum((persistant_gene.hoch$Arc>0)&(persistant_gene.hoch$Tnik>0))
sum((persistant_gene.hoch$Arc>0)&(persistant_gene.hoch$Acan>0))
sum((persistant_gene.hoch$Arc>0)&(persistant_gene.hoch$Entpd4>0))
sum((persistant_gene.hoch$Arc>0)&(persistant_gene.hoch$Hes7>0))
sum((persistant_gene.hoch$Acan>0))
sum((persistant_gene.hoch$Blnk>0))
persistant_gene.hoch <- hochgerner2018_counts[marker.idx,hochgerner2018.dg.idx]
rownames(hochgerner2018_counts)[1798]
sum((persistant_gene.hoch[1798,]>0))
sum(persistant_gene.hoch[1798,]>0)
sum(persistant_gene.hoch[1216,]>0)
?read.csv
hochgerner24k_2018_meta <- read.csv(paste(testsetpath,"/Hochgerner2018/GSE104323_metadata_barcodes_24185cells.txt.gz", sep=""),
header =TRUE, sep = "    ")
hochgerner24k_2018_meta <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_metadata_barcodes_24185cells.txt.gz", sep="\t"),
header =T, fill =TRUE)
hochgerner24k_2018_meta <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_metadata_barcodes_24185cells.txt.gz", sep=""),
sep ="\t", header = T)
View(hochgerner24k_2018_meta)
table(hochgerner24k_2018_meta$characteristics..cell.cluster)
View(hochgerner24k_2018_meta)
hochgerner24k_2018_counts <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_10X_expression_data_V2.tab.gz", sep=""))
hochgerner24k_2018_counts <- read.table(paste(testsetpath,"/Hochgerner2018/GSE104323_10X_expression_data_V2.tab.gz", sep=""))
hochgerne24k.dg.idx <-which(as.character(hochgerner24k_2018_meta$characteristics..cell.cluster)=="GC-adult")
hochgerne24k.dg.idx <-which(as.character(hochgerner24k_2018_meta$characteristics..cell.cluster)=="GC-adult")
marker.idx <- c()
for(i in engram_markers){
marker.idx <-c(marker.idx,(which(rownames(hochgerner2018_counts)==i)))
}
persistant_gene.hoch24k <- hochgerner2018_counts[marker.idx,hochgerne24k.dg.idx]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
persistant_gene.hoch24k <- hochgerner2018_counts[marker.idx, hochgerne24k.dg.idx]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
marker.idx
persistant_gene.hoch24k <- hochgerner2018_counts[as.numeric(marker.idx), as.numeric(hochgerne24k.dg.idx)]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
View(hochgerner24k_2018_counts)
dim(hochgerner24k_2018_counts)
hochgerner42k_2018_counts[27934,]
hochgerner42k_2018_counts[27934,]
hochgerner24k_2018_counts[27934,]
hochgerner24k_2018_counts[27934,1]
hochgerner24k_2018_counts[27935,1]
hochgerner24k_2018_counts[1,24186]
hochgerner24k_2018_counts[1,24187]
colnames(hochgerner24k_2018_counts) <- hochgerner24k_2018_counts[1,]
rownames(hochgerner24k_2018_counts) <- hochgerner24k_2018_counts[,1]
hochgerner24k_2018_counts <- hochgerner24k_2018_counts[2:27934,2:24186]
hochgerne24k.dg.idx <-which(as.character(hochgerner24k_2018_meta$characteristics..cell.cluster)=="GC-adult")
marker.idx <- c()
for(i in engram_markers){
marker.idx <-c(marker.idx,(which(rownames(hochgerner2018_counts)==i)))
}
persistant_gene.hoch24k <- hochgerner2018_counts[as.numeric(marker.idx), as.numeric(hochgerne24k.dg.idx)]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
#hochgerner second larger dataset
hochgerner24k.dg.idx <-which(as.character(hochgerner24k_2018_meta$characteristics..cell.cluster)=="GC-adult")
hochgerner24k.dg.idx
persistant_gene.hoch24k <- hochgerner2018_counts[marker.idx, hochgerner24k.dg.idx]
persistant_gene.hoch24k <- hochgerner24k_2018_counts[marker.idx, hochgerner24k.dg.idx]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
View(persistant_gene.hoch24k)
marker.idx <- c()
for(i in engram_markers){
marker.idx <-c(marker.idx,(which(rownames(hochgerner2018_counts)==i)))
}
persistant_gene.hoch24k <- hochgerner24k_2018_counts[marker.idx+1, hochgerner24k.dg.idx+1]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
View(persistant_gene.hoch24k)
engram_markers
for(i in engram_markers){
print(i)
marker.idx <-c(marker.idx,(which(rownames(hochgerner2018_counts)==i)))
}
which(rownames(hochgerner2018_counts)==i)
marker.idx <- c()
for(i in engram_markers){
print(i)
marker.idx <-c(marker.idx,(which(rownames(hochgerner24k_2018_counts)==i)))
}
persistant_gene.hoch24k <- hochgerner24k_2018_counts[marker.idx+1, hochgerner24k.dg.idx+1]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
View(persistant_gene.hoch24k)
sum(persistant_gene.hoch24k$Arcn1)
sum(as.numeric(persistant_gene.hoch24k$Arcn1))
sum(persistant_gene.hoch24k$Arcn1>0)
sum(persistant_gene.hoch24k$Arcn1>1)
hist(persistant_gene.hoch24k$Arcn1)
hist(as.numeric(persistant_gene.hoch24k$Arcn1))
?str_detect
rownames(hochgerner24k_2018_counts)[str_detect(rownames(hochgerner24k_2018_counts), "Arc")]
persistant_gene.hoch24k <- hochgerner24k_2018_counts[marker.idx, hochgerner24k.dg.idx]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
sum(persistant_gene.hoch24k$Arc>0)
sum(persistant_gene.hoch24k$Arc>1)
sum(persistant_gene.hoch24k$Arc>2)
which(rownames(jeager2018_counts)=="Arc")
hist(jeager2018_counts[3021,])
hist(as.numeric(jeager2018_counts[3021,]))
table(hochgerner24k_2018_meta$characteristics..cell.cluster)
#hochgerner second larger dataset
hochgerner24k.dg.idx <-which(as.character(hochgerner24k_2018_meta$characteristics..cell.cluster)=="Immature-GC")
marker.idx <- c()
for(i in engram_markers){
print(i)
marker.idx <-c(marker.idx,(which(rownames(hochgerner24k_2018_counts)==i)))
}
persistant_gene.hoch24k <- hochgerner24k_2018_counts[marker.idx, hochgerner24k.dg.idx]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
sum(persistant_gene.hoch24k$Arc>0)
hist(as.numeric(persistant_gene.hoch24k$Arc))
hist(as.numeric(jeager2018_counts[3021,]))
hist(as.numeric(persistant_gene.hoch24k$Fos))
sum(persistant_gene.hoch24k$Fos>10)
sum(persistant_gene.hoch24k$Jund>0)
sum(persistant_gene.hoch24k$Gadd45b>0)
hist(as.numeric(persistant_gene.hoch24k$Gadd45b))
sum((persistant_gene.hoch24k$Gadd45b>0)&(persistant_gene.hoch$Fos>0))
sum((persistant_gene.hoch24k$Jund>0)&(persistant_gene.hoch$Fos>0))
sum((persistant_gene.hoch24k$Tet3>0)&(persistant_gene.hoch$Fos>0))
sum((persistant_gene.hoch24k$Tet3>0)&(persistant_gene.hoch$Arc>0))
sum(persistant_gene.hoch$Arc>0)
sum((persistant_gene.hoch24k$Tet3>0)&(persistant_gene.hoch24k$Arc>0))
sum((persistant_gene.hoch24k$Fos>0)&(persistant_gene.hoch24k$Arc>0))
#hochgerner second larger dataset
hochgerner24k.dg.idx <-which(as.character(hochgerner24k_2018_meta$characteristics..cell.cluster)=="GC-Adult")
marker.idx <- c()
for(i in engram_markers){
marker.idx <-c(marker.idx,(which(rownames(hochgerner24k_2018_counts)==i)))
}
persistant_gene.hoch24k <- hochgerner24k_2018_counts[marker.idx, hochgerner24k.dg.idx]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
sum((persistant_gene.hoch24k$Fos>0)&(persistant_gene.hoch24k$Arc>0))
hist(persistant_gene.hoch24k$Fos)
hist(as.numeric(persistant_gene.hoch24k$Fos))
hist(as.numeric(persistant_gene.hoch24k$Fos))
hochgerner24k.dg.idx <-which(as.character(hochgerner24k_2018_meta$characteristics..cell.cluster)=="GC-adult")
marker.idx <- c()
for(i in engram_markers){
marker.idx <-c(marker.idx,(which(rownames(hochgerner24k_2018_counts)==i)))
}
persistant_gene.hoch24k <- hochgerner24k_2018_counts[marker.idx, hochgerner24k.dg.idx]
persistant_gene.hoch24k <- data.frame(t(persistant_gene.hoch24k))
hist(as.numeric(persistant_gene.hoch24k$Fos))
sum((persistant_gene.hoch24k$Fos>0)&(persistant_gene.hoch24k$Arc>0))
View(persistant_gene.hoch)
marker.idx <- c()
for(i in engram_markers){
marker.idx <-c(marker.idx,(which(rownames(hochgerner2018_counts)==i)))
}
hochgerner2018.dg.idx <-which(as.character(hochgerner2018_counts[3,])=="DG")
persistant_gene.hoch <- hochgerner2018_counts[as.numeric(marker.idx),as.numeric(hochgerner2018.dg.idx)]
persistant_gene.hoch <- data.frame(t(persistant_gene.hoch))
sum((persistant_gene.hoch$Arc>0)&(persistant_gene.hoch$Tet3>0))
sum((persistant_gene.hoch$Fos>0)&(persistant_gene.hoch$Tet3>0))
sum((persistant_gene.hoch$Fos>0)&(persistant_gene.hoch$Jund>0))
engram_markers
hochgerner2018.dg.idx <-which(as.character(hochgerner2018_counts[3,])=="DG")
engram_markers <- c("Arc","Fos","Jund", "Tet3", "Atf3", "Gadd45b")
marker.idx <- c()
for(i in engram_markers){
marker.idx <-c(marker.idx,(which(rownames(test_habib2016_logTPM)==i)))
}
persistant_gene <- test_habib2016_logTPM[ engram_markers, habib2016.dg.idx]
persistant_gene <- data.frame(t(persistant_gene))
reactivation.markers <- c("Arc", "Fos", "Blnk", "Tnik", "Acan", "Entpd4", "Hes7")
marker.idx <- c()
for(i in reactivation.markers){
marker.idx <-c(marker.idx,(which(rownames(hochgerner2018_counts)==i)))
}
persistant_gene <- test_habib2016_logTPM[ reactivation.markers, habib2016.dg.idx]
persistant_gene <- data.frame(t(persistant_gene))
sum((persistant_gene$Hes7>0)&(persistant_gene$Arc>0))
sum((persistant_gene$Hes7>0)&(persistant_gene$Fos>0))
sum((persistant_gene$Blnk>0)&(persistant_gene$Arc>0))
sum((persistant_gene$Blnk>0)&(persistant_gene$Hes7>0)&(persistant_gene$BEntpd4>0))
sum((persistant_gene$Blnk>0)&(persistant_gene$Hes7>0)&(persistant_gene$Acan>0))
sum((persistant_gene$Arc>0)&(persistant_gene$Hes7>0))
View(jeager2018_meta)
jeager2018_meta$fos_status[361:912] <- "Fos+"
dim(jeager2018_meta)
dim(jeager2018_meta)[1]
jeager2018_meta$fos_status[361:dim(jeager2018_meta)[1]] <- "Fos+"
which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos+"))
which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-"))
length(which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-")))
jeger2018_counts[which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-")),
rownames(jeager2018_counts)=="Fos"]
knitr::opts_chunk$set(echo = TRUE)
jeager2018_counts[which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-")),
rownames(jeager2018_counts)=="Fos"]
#Make seurate object
jeager2018_counts[is.na(jeager2018_counts)] = 0
jeager2018_counts[which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-")),
rownames(jeager2018_counts)=="Fos"]
rownames(jeager2018_counts)=="Fos"
which(rownames(jeager2018_counts)=="Fos")
jeager2018_counts[which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-")),which(rownames(jeager2018_counts)=="Fos")]
jeager2018_counts[which(rownames(jeager2018_counts)=="Fos"),which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-"))]
hist(jeager2018_counts[which(rownames(jeager2018_counts)=="Fos"),which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-"))])
hist(as.numeric(jeager2018_counts[which(rownames(jeager2018_counts)=="Fos"),which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-"))]))
hist(as.numeric(jeager2018_counts[which(rownames(jeager2018_counts)=="Fos"),which((jeager2018_meta$exposure=="1hr")&(jeager2018_meta$fos_status=="Fos-"))]))
hist(as.numeric(jeager2018_counts[which(rownames(jeager2018_counts)=="Fos"),which((jeager2018_meta$exposure=="1hr")&(jeager2018_meta$fos_status=="Fos+"))]))
?hist
hist(as.numeric(jeager2018_counts[which(rownames(jeager2018_counts)=="Fos"),which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-"))]),
title = "Homecage Fos-AntiBd Negative nuclear Fos read distribution")
hist(as.numeric(jeager2018_counts[which(rownames(jeager2018_counts)=="Fos"),which((jeager2018_meta$exposure=="HC")&(jeager2018_meta$fos_status=="Fos-"))]),
main = "Homecage Fos-AntiBd Negative nuclear Fos read distribution")
hist(as.numeric(jeager2018_counts[which(rownames(jeager2018_counts)=="Fos"),which((jeager2018_meta$exposure=="1hr")&(jeager2018_meta$fos_status=="Fos-"))]),
main = "1Hour post-NE Fos-AntiBd Negative nuclear Fos read distribution")
x$test <- c(1:3)
?data.frame
marker.search <- function(markers, test.count.data){
#returns genes which were searched for, remember to filter the cols
# for test.count.data for cells of interest [rows(genes), cols(cells)]
markers <- c("Fos", "Arc", markers)
marker.idx <- c()
for(i in engram_markers){
marker.idx <-c(marker.idx,(which(rownames(test_habib2016_logTPM)==i)))
}
gene.counts <- test.count.data[ markers., ]
gene.counts <- data.frame(t(gene.counts))
return(gene.counts)
}
rm(persistant_gene)
rm(marker.idx)
marker.search <- function(markers, test.count.data){
#returns genes which were searched for, remember to filter the cols
# for test.count.data for cells of interest [rows(genes), cols(cells)]
markers <- c("Fos", "Arc", markers)
marker.idx <- c()
for(i in markers.idx){
marker.idx <-c(marker.idx,(which(rownames(test_habib2016_logTPM)==i)))
}
gene.counts <- test.count.data[ markers., ]
gene.counts <- data.frame(t(gene.counts))
return(gene.counts)
}
