race_eth = "African-American"
}else if (as.character(datafram$race_ethnicity[i])=="3"){
race_eth = "Hispanic"
}
ident_col = append(ident_col, paste(race_eth, datafram$sex[i], sep = " "))
} #end of for loop
return(ident_col)
} # end of make_ident_col function
dat$ident = as.factor(make_ident_col(dat))
ggbetweenstats(
data = dat,
y = anthroheightcalc,
x = ident#,
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
p1 = grouped_ggbetweenstats(
data = dat,
y = "anthroheightcalc",
x = sex,
grouping.var = race_ethnicity,
results.subtitle = FALSE
)
p2 = grouped_ggbetweenstats(
data = dat,
y = devhx_3_p,
x = sex,
grouping.var = race_ethnicity,
results.subtitle = FALSE
)
p3 = grouped_ggbetweenstats(
data = dat,
y = devhx_3_p,
x = sex,
grouping.var = race_ethnicity,
results.subtitle = FALSE
)
colnames(dat)[1:9]
colnames(dat)[20:309]
colnames(dat)[20:30]
humanreadable.labels=read.table("C:/Users/angus/Desktop/Angus_Master_Plan_Data_Scripts/Data_and_scripts/Humanreadableimputedcolnames.csv", sep = ",")[2:319,2]
humanreadable.labels[1:57]
colnames(dat)[1:57]= humanreadable.labels[1:57]
ggbetweenstats(
data = dat,
y = "Lead Risk",
x = ident#,
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
p <- ggplot(dat, aes(x=ident, y="Lead Risk")) +
geom_violin() + geom_boxplot(width=0.1)
p
ggbetweenstats(
data = dat,
y = "Lead Risk",
x = ident,
results.subtitle = FALSE
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
dev.off()
ggbetweenstats(
data = dat,
y = "Lead Risk",
x = ident,
results.subtitle = FALSE
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
dev.off()
ggbetweenstats(
data = dat,
y = "Lead Risk",
x = ident,
ggstatsplot.layer = FALSE
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
ggbetweenstats(
data = dat,
y = "Lead Risk",
x = ident,
effsize.type = "partial_eta" #this gets it to run t tests
ggstatsplot.layer = FALSE
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
ggbetweenstats(
data = dat,
y = "Lead Risk",
x = ident,
effsize.type = "partial_eta", #this gets it to run t tests
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
ggbetweenstats(
data = dat,
y = "ADI",
x = ident,
effsize.type = "partial_eta", #this gets it to run t tests
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
ggbetweenstats(
data = dat,
y = "ADI",
x = ident,
plot.type = "violin",
effsize.type = "partial_eta", #this gets it to run t tests
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
ggbetweenstats(
data = dat,
y = "Family Income",
x = ident,
plot.type = "violin",
effsize.type = "partial_eta", #this gets it to run t tests
#centrality.label.args = NULL,
#centrality.point.args = NULL
)
res.man <- anova("Lead Risk" ~ ident, data = dat)
summary(res.man)
humanreadable.labels[8:57]
# White Males -------------------------------------------------------------
temp=imputed[imputed$sex=="M" & imputed$race_ethnicity==1,]
predictors=c(9:13,16:22,25:57)
colnames(temp)[predictors]
pvalplot<-function(var) {
pvalall<-as.data.frame(c(t(var[order])))#needs order or the variabls don't correspond to the domains
pvalall$Sample_Size<-c((1:(5*162)),(1:(11*162)),(1:(3*162)),(1:(5*162)),(1:(13*162)),(1:(3*162)),(1:(5*162)))
pvalall$Group<-c(rep("Physical",5*162),rep("Perinatal",11*162),rep("Developmental",3*162),
rep("Lifestyle-Life Events",5*162),rep("Parental-Family",13*162),rep("School",3*162),
rep("Neighborhood",5*162))
pvalall[,1]<-ifelse(pvalall[,1]<1e-20,1e-20,pvalall[,1])
names(pvalall)[1]<-"P-Values"
p<-ggplot(pvalall,aes(x = 1:nrow(pvalall), y = -log10(pvalall[,1])))+
geom_point(aes(color = Group,size=5),
alpha = 0.7, size=5)
p+ylab(expression(atop(" -log10(P-Values)")))+xlab(expression(atop("Domains")))+
theme(legend.title=element_blank())+
theme_classic()+
theme(axis.title.x = element_text(size = 25))+
theme(axis.title.y = element_text(size = 25))+
theme(text = element_text(size=25))+
theme(legend.title=element_blank())+
theme(legend.position=c(0.8,0.7))+
geom_abline(slope=0,intercept=-log10(c(var)[astsa::FDR(c(var))]),linetype = "dashed")+
geom_abline(slope=0,intercept=5.2,linetype = "dashed")+
theme(axis.text.x = element_blank(),
axis.ticks.x=element_blank())+
theme(
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6))+
annotate("text",  label = expression(paste("FDR P-value","=0.05")),size=7, x=1000,y=-log10(c(var)[astsa::FDR(c(var))])-0.5, color="black",parse=TRUE)+
annotate("text",  label = expression(paste("Bonferroni P-value","=0.05")),size=7, x=1000,y=5.7, color="black",parse=TRUE)
}
fml<-lmer(temp[,308]~interview_age+rel_relationship+ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+  #this models random effect for site
(1|mri_info_deviceserialnumber:rel_family_id)+#this  models random effect by nesting family
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)
summary(fml)
summary(fml)[["coefficients"]]
isSingular(fml)
rePCA(fml)
pcs=rePCA(fml)
pcs$`mri_info_deviceserialnumber:rel_family_id`
pmat<-matrix(0, length(predictors),length(outcomes))
tmat<-matrix(0, length(predictors),length(outcomes))
bmat<-matrix(0, length(predictors),length(outcomes))
semat<-matrix(0, length(predictors),length(outcomes))
#name the rows and columns
rownames(pmat)=expnames
rownames(tmat)=expnames
rownames(bmat)=expnames
rownames(semat)=expnames
colnames(pmat)=colnames(temp)[outcomes]
colnames(tmat)=colnames(temp)[outcomes]
colnames(bmat)=colnames(temp)[outcomes]
colnames(semat)=colnames(temp)[outcomes]
temp=imputed[imputed$sex=="M" & imputed$race_ethnicity==1,]
temp$ehi_y_ss_scoreb<-as.factor(temp$ehi_y_ss_scoreb)
temp$rel_relationship<-as.factor(temp$rel_relationship)
temp$rel_family_id<-as.factor(temp$rel_family_id)
iterj=0
for (j in outcomes[1:3]) {
iterj=iterj+1
fml<-lmer( temp[,j]~interview_age+rel_relationship+
ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+
(1|mri_info_deviceserialnumber:rel_family_id)+
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)  #linear mixed model
iteri = 0
for ( i in predictors) {
iteri=iteri+1
pmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,5] #capture the pvalues
std<-stdCoef.merMod(fml)  #calculate standardized coefficients
bmat[iteri,iterj]<-std[9,1]  #capture the regression coefficients
tmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,4] #capture the t-values
semat[iteri,iterj]<-std[9,2] #capture the se
}
}
View(pmat)
install.packages("tictoc")
library(tictoc)
tic()
fml<-lmer(temp[,308]~interview_age+rel_relationship+ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+  #this models random effect for site
(1|mri_info_deviceserialnumber:rel_family_id)+#this  models random effect by nesting family
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)
toc()
Sys.Date()
paste(Sys.Data(), Sys.time(), sep ="_")
paste(Sys.Date(), Sys.time(), sep ="_")
length(Sys.time())
Sys.time()[5]
Sys.time()[[5]]
paste(Sys.Date(), "Attmpt1", sep ="_")
paste(Sys.Date(), "Attempt1", sep ="_")
tic()
temp=imputed[imputed$sex=="M" & imputed$race_ethnicity==1,]
temp$ehi_y_ss_scoreb<-as.factor(temp$ehi_y_ss_scoreb)
temp$rel_relationship<-as.factor(temp$rel_relationship)
temp$rel_family_id<-as.factor(temp$rel_family_id)
#select predictors and outcomes
predictors=c(9:13,16:22,25:57)
outcomes=c(77:147,219:309)
psychopathology=c(58:76) #not used here nor is sulcal depth
#create empty matrices to populate with a for loop
#pmat=matrix of p-values
#tmat=matrix of t-values
#bmat=matrix of standardized regression coefficients
#semat=matrix of stanard errors of regression coefficeints
pmat<-matrix(0, length(predictors),length(outcomes))
tmat<-matrix(0, length(predictors),length(outcomes))
bmat<-matrix(0, length(predictors),length(outcomes))
semat<-matrix(0, length(predictors),length(outcomes))
#name the rows and columns
rownames(pmat)=expnames
rownames(tmat)=expnames
rownames(bmat)=expnames
rownames(semat)=expnames
colnames(pmat)=colnames(temp)[outcomes]
colnames(tmat)=colnames(temp)[outcomes]
colnames(bmat)=colnames(temp)[outcomes]
colnames(semat)=colnames(temp)[outcomes]
#start the for loop to go over full model for each by
iterj=0
for (j in outcomes) {
iterj=iterj+1
fml<-lmer( temp[,j]~interview_age+rel_relationship+
ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+
(1|mri_info_deviceserialnumber:rel_family_id)+
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)  #linear mixed model
iteri = 0
for ( i in predictors) {
iteri=iteri+1
pmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,5] #capture the pvalues
std<-stdCoef.merMod(fml)  #calculate standardized coefficients
bmat[iteri,iterj]<-std[9,1]  #capture the regression coefficients
tmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,4] #capture the t-values
semat[iteri,iterj]<-std[9,2] #capture the se
}
}
toc()
tic()
temp=imputed[imputed$sex=="M" & imputed$race_ethnicity==1,]
temp$ehi_y_ss_scoreb<-as.factor(temp$ehi_y_ss_scoreb)
temp$rel_relationship<-as.factor(temp$rel_relationship)
temp$rel_family_id<-as.factor(temp$rel_family_id)
#select predictors and outcomes
predictors=c(9:13,16:22,25:57)
outcomes=c(77:147,219:309)
psychopathology=c(58:76) #not used here nor is sulcal depth
#create empty matrices to populate with a for loop
#pmat=matrix of p-values
#tmat=matrix of t-values
#bmat=matrix of standardized regression coefficients
#semat=matrix of stanard errors of regression coefficeints
pmat<-matrix(0, length(predictors),length(outcomes))
tmat<-matrix(0, length(predictors),length(outcomes))
bmat<-matrix(0, length(predictors),length(outcomes))
semat<-matrix(0, length(predictors),length(outcomes))
#name the rows and columns
rownames(pmat)=expnames
rownames(tmat)=expnames
rownames(bmat)=expnames
rownames(semat)=expnames
colnames(pmat)=colnames(temp)[outcomes]
colnames(tmat)=colnames(temp)[outcomes]
colnames(bmat)=colnames(temp)[outcomes]
colnames(semat)=colnames(temp)[outcomes]
#start the for loop to go over full model for each by
iterj=0
for (j in outcomes[1:3]) {
iterj=iterj+1
fml<-lmer( temp[,j]~interview_age+rel_relationship+
ehi_y_ss_scoreb+scale(smri_vol_scs_intracranialv)+
(1|mri_info_deviceserialnumber)+
(1|mri_info_deviceserialnumber:rel_family_id)+
anthroheightcalc+anthroweightcalc+anthro_waist_cm+
pds_p+common_medical+trauma+reshist_addr1_adi_perc+reshist_addr1_pm25+
reshist_addr1_leadrisk+neighborhood_crime_y+abcd_pnsc01+pmq_y_ss_mean+
crpbi_y_ss_parent+crpbi_y_ss_caregiver+srpf_y_ss_ses+
srpf_y_ss_iiss+srpf_y_ss_dfs+weekdayscreen+
weekendscreen+physical_activity1_y+kbi_p_c_bully+
birth_weight_lbs+devhx_3_p+devhx_4_p+devhx_5_p+devhx_6_p+
devhx_9_prescript_med+devhx_12a_p+devhx_13_3_p+devhx_18_p+
devhx_20_p+devhx_21_p+dhx01_drugs+medical_dhx01+birth_complications+
family_conflict_parents+family_conflict_youth+parental_psychopathology+
demo_prnt_ed_v2+demo_prnt_empl_v2+demo_comb_income_v2+demo_prtnr_ed_v2+
demo_prtnr_empl_v2+marital+severe_financial_difficulty,
data=temp)  #linear mixed model
iteri = 0
for ( i in predictors) {
iteri=iteri+1
pmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,5] #capture the pvalues
std<-stdCoef.merMod(fml)  #calculate standardized coefficients
bmat[iteri,iterj]<-std[9,1]  #capture the regression coefficients
tmat[iteri,iterj]<-summary(fml)[["coefficients"]][9,4] #capture the t-values
semat[iteri,iterj]<-std[9,2] #capture the se
}
}
toc()
install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
library(ggseg)
library(ggplot2)
# ##################################### install 'ggseg' package for visulization purpose
# install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
# ##################################### install 'ggseg' package for visulization purpose
# install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
library(Rcpp)
remove.packages("Rcpp", lib="~/R/win-library/4.1")
remove.packages("utf8", lib="~/R/win-library/4.1")
remove.packages("cli", lib="~/R/win-library/4.1")
remove.packages("tibble", lib="~/R/win-library/4.1")
remove.packages("colorspace", lib="~/R/win-library/4.1")
# ##################################### install 'ggseg' package for visulization purpose
# install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
# ##################################### install 'ggseg' package for visulization purpose
# install.packages("remotes")
remotes::install_github("LCBC-UiO/ggseg")
exposures=c(9:13,16:22,25:57)
categorical = c(7, 8, 13, 16, 33, 37, 38, 39, 40, 41, 45, 46, 47, 50, 52, 55, 56) #categorical yes/no
ordinal= c( 12, 43, 44, 51, 54)
continuous = c(2,exposures[!(exposures %in% categorical)])
continuous
getcd()
getcwd()
getwd()
humanreadable.labels[expossures]
humanreadable.labels=read.table("C:/Users/angus/Desktop/Angus_Master_Plan_Data_Scripts/Data_and_scripts/Humanreadableimputedcolnames.csv", sep = ",")[2:319,2]
exposures=c(9:13,16:22,25:57) #equivalent to predictors in amirs scripts, note they are rearanged for presentation by order
humanreadable.labels[exposures]
which(humanreadable.labels == "Trauma")
colnames(imputed)[16]
sum(imputed$trauma)
e = {{a,b},{a,c}}
e = {[a,b],[a,c]}
e = c([a,b],[a,c])
e = c(c(a,b),c(a,c))
e = c(c('a','b'),c('a','c'))
e[1]
e[1][1]
e[1][2]
library(tidyverse)
library(GEOquery)
library(edgeR)
library(umap)
library(limma)
library(knitr)
library(readxl)
library(eulerr)
library(ermineR)
library(sgof)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(GEOquery)
library(tidyverse)
#library(umap)
library(limma)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
str(gds)
head(Meta(gds))
test <- filename=system.file("GSE152632_series_matrix.txt.gz",package="GEOquery"))
test <- getGEO(filename=system.file("GSE152632_series_matrix.txt.gz",package="GEOquery"))
#library(umap)
library(limma)
Sys.setenv("VROOM_CONNECTION_SIZE")
library(tidyverse)
library(GEOquery)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
Sys.setenv("VROOM_CONNECTION_SIZE")
Sys.setenv("VROOM_CONNECTION_SIZE", "200000")
help(Sys.setenv)
Sys.setenv(VROOM_CONNECTION_SIZE = "200000")
2e9
Sys.setenv(VROOM_CONNECTION_SIZE = 1e6)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
Sys.setenv(VROOM_CONNECTION_SIZE = 1e2)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
Sys.setenv(VROOM_CONNECTION_SIZE = 1e6)
#get Chen et al., (2020)
gds <- getGEO("GSE152632")
gds <- getGEO("GSE152632")
library(GEOquery)
gds <- getGEO("GSE152632")
Sys.setenv(VROOM_CONNECTION_SIZE = 1e6)
library(GEOquery)
gds <- getGEO("GSE152632")
head(Meta(getGEO("GSE152632")))
library(tidyverse)
library(GEOquery)
#get Chen et al., (2020)
#important before getting the geo use this...
Sys.setenv(VROOM_CONNECTION_SIZE = 1e6)
gds_jeager2018 <- getGEO("GSE98679")
sessionInfo()
rlang::trace_back()
gds_jeager2018 <- getGEO("GSE98679")
rlang::trace_back()
rlang::trace
gds_jeager2018 <- getGEO("GSE98679")
rlang::last_error()
rlang::last_trace()
gds_jeager2018 <- getGEO("GSE98679")
rlang::last_trace()
pwd
getwd
getwd()
jeager2018_counts <- read.table('Jeager2018_GSE98679/GSE98679_count.txt.gz')
#draft ofr the classifier
setwd("C:/Users/angus/Desktop/PavLabEngrams/EngramCellClassifier")
jeager2018_counts <- read.table('Jeager2018_GSE98679/GSE98679_count.txt.gz')
View(jeager2018_counts)
colnames(jeager2018_counts)
test <- read.table('Jeager2018_GSE98679/GSE98679_v2_GSM3308862-GSM3309413_tpm.txt.gz')
View(test)
colnames(test)
colnames(jeager2018_counts)
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("monocle")
BiocManager::install("monocle")
library("monocle")
chen2020_counts <- read.table('Chen2020_GSE152632/GSE152632_GEO_mberkchen_TRAP2_counts.csv.gz')
View(chen2020_counts)
View(chen2020_counts)
chen2020_counts[1,2]
rm chen2020_counts
rm(chen2020_counts)
chen2020_counts <- read.csv('Chen2020_GSE152632/GSE152632_GEO_mberkchen_TRAP2_counts.csv.gz', header = TRUE)
View(chen2020_counts)
rm(test)
